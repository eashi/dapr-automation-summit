// const publishUrl = `${daprUrl}/publish/${pubsubName}/${req.body.messageType}?metadata.rawPayload=true`;
-------------------------
// app.get('/dapr/subscribe', (_req, res) => {
//     res.json([
//         {
//             pubsubname: "pubsub",
//             topic: "A",
//             routes: {
//                 rules: [
//                     {
//                         match: 'event.data.message == "emad"',
//                         path: '/Name'
//                     }
//                 ],
//                 default: '/A'
//             }
//         },
//         {
//             pubsubname: "pubsub",
//             topic: "B"
//         }
//     ]);
// });
----------------------------------
# apiVersion: dapr.io/v1alpha1
# kind: Component
# metadata:
#   name: pubsub
# spec:
#   type: pubsub.redis
#   version: v1
#   metadata:
#   - name: redisHost
#     value: localhost:6379
#   - name: redisPassword
#     value: ""
----------------------------
apiVersion: dapr.io/v1alpha1
kind: Component
metadata:
  name: pubsub
  namespace: default
spec:
  type: pubsub.rabbitmq
  version: v1
  metadata:
  - name: host
    value: "amqp://localhost:5672"
  # - name: consumerID
  #   value: myapp
  - name: durable
    value: false
  - name: deletedWhenUnused
    value: false
  - name: autoAck
    value: false
  - name: deliveryMode
    value: 0
  - name: requeueInFailure
    value: false
  - name: prefetchCount
    value: 0
  - name: reconnectWait
    value: 0
  - name: concurrencyMode
    value: parallel
  - name: backOffPolicy
    value: exponential
  - name: backOffInitialInterval
    value: 100
  - name: backOffMaxRetries
    value: 16
  - name: enableDeadLetter # Optional enable dead Letter or not
    value: true
  - name: maxLen # Optional max message count in a queue
    value: 3000
  - name: maxLenBytes # Optional maximum length in bytes of a queue.
    value: 10485760
-------------------------------
